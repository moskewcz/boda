# note: editing this file is similar to editing the makefile.  in particular (like after editing the makefile), after
# editing this file, currently built objects might differ or fail to build after a make clean. however, in many cases,
# this may be acceptable / ignorable ... user beware.

# adjust paths below as needed. note that if no special paths are needed for a feature (i.e. it is present in the system
# include/library paths), one need not specify them here. in the limit, for system-wide header-only libraries, a
# dependency section may be empty. however, it will still function in order to disable particular object files from
# being built if desired. note: the results of processing this file will be written to the file: dependencies.make

[base] # special basic setup / global dependencies; always enabled, will always be emmited first in dependencies.make
CPP := g++
CPPFLAGS := -Wall -O3 -g -std=c++0x -rdynamic -fPIC -fopenmp -Wall -I. # -I. is so files in gen/* can be included ... not ideal?
LDFLAGS := -lboost_system -lboost_filesystem -lboost_iostreams -lboost_regex -lboost_program_options 

[lmdb]
# assume system defaults include needed include/lib dirs
LDFLAGS := $(LDFLAGS) -llmdb

[octave disable]
CPPFLAGS := $(CPPFLAGS) -I/usr/include/octave-4.0.0 -I/usr/include/octave-4.0.0/octave
LDFLAGS := $(LDFLAGS) -loctave -loctinterp

[SDL2 disable]
CPPFLAGS := $(CPPFLAGS) -I/usr/include/SDL2 -I/usr/local/include/SDL2
LDFLAGS := $(LDFLAGS) -lSDL2 -lSDL2_ttf -lrt

[caffe_pb gen_fn=caffe.pb.cc gen_fn=caffe.pb.h]
LDFLAGS := $(LDFLAGS) -lprotobuf
# manually add deps since we can create this particular header (which is unusual and otherwise unhandled by the header
# deps system.
caffepb.o : caffe.pb.h 
upgrade_proto.o : caffe.pb.h 
# note: it may be possible to not rebuild caffe.pb.h / caffe.pb.cc in some cases
caffe.pb.cc caffe.pb.h : ../src/ext/caffe.proto
	protoc -I../src/ext --cpp_out=. ../src/ext/caffe.proto


[cuda disable]
CUDA_HOME := /usr/local/cuda
CPPFLAGS := $(CPPFLAGS) -I$(CUDA_HOME)/include
CUDA_LIB = $(CUDA_HOME)/lib64
LDFLAGS := $(LDFLAGS) -L$(CUDA_LIB) -lcudart -lcublas -lcurand -lcuda
# we choose to rpath the CUDA library dir here, since it is not commonly in the system library path. this is optional;
# if you prefer to use LD_LIBRARY_PATH or other methods, comment out the following line:
LDFLAGS := $(LDFLAGS) -Wl,-rpath,$(CUDA_LIB)

[nvrtc needs=cuda disable]
LDFLAGS := $(LDFLAGS) -lnvrtc

[opencl]
LDFLAGS := $(LDFLAGS) -lOpenCL

[caffe needs=cuda needs=caffe_pb disable]
CAFFE_HOME := /home/moskewcz/git_work/caffe_dev
CAFFE_LIB := $(CAFFE_HOME)/build/lib
CPPFLAGS := $(CPPFLAGS) -I$(CAFFE_HOME)/include -I$(CAFFE_HOME)/build/src
LDFLAGS := $(LDFLAGS) -L$(CAFFE_LIB) -lcaffe -lglog -ldl 
# we choose to rpath the caffe library dir here, since it is not commonly in the system library path. this is optional;
# if you prefer to use LD_LIBRARY_PATH or other methods, comment out the following line:
LDFLAGS := $(LDFLAGS) -Wl,-rpath,$(CAFFE_LIB)
ifneq ($(shell diff -wq ../src/ext/caffe.proto ${CAFFE_HOME}/src/caffe/proto/caffe.proto ; echo $$? ),0)
$(error "building with caffe support, but diff of boda copy of caffe.proto with caffe version failed (because the content diffed, a file was not found, etc). run diff manually for details and/or update boda version of caffe.proto. aborting make.")
endif

[python]
CPPFLAGS := $(CPPFLAGS) -I/usr/include/python2.7 
LDFLAGS := $(LDFLAGS) -lpython2.7

[turbojpeg] # disable-able, but will cause any test/mode that tries to load a .jpeg to fail at run-time
LDFLAGS := $(LDFLAGS) -lturbojpeg

[stacktrace_gnu] # if enabled, get stacktrace using gnu extentions backtrace() and backtrace_symbols() 


# list of object files to compile. at least the objects that are direct dependencies of the above sections should be
# marked by adding the dependency section name after the object file below. thus, if the dependency is disabled, the
# code should compile -- but perhaps not like. for some dependencies, we also mark all indirect dependencies (FIXME:
# handle better? more automated / more explicit?). thus, for some dependencies we can disable them and both compile and
# link a reduced-functionality executable. since most of the time a particular set of dependencies is enabled/disabled,
# and the the dependency tracking here is manual, it may go stale and need to be updated when trying to disable a
# particular dependency. note that some dependencies may not usefully be disable-able.

[objs]
cnn-prof.o
stacktrace_util_gnu.o stacktrace_gnu
stacktrace_util_stub.o -stacktrace_gnu
op_base.o
rtc_prof.o
cnn_codegen.o
rtc_func_gen.o
rtc_ipc.o
rtc_fwd.o
rtc_compute.o
ocl_util.o opencl
caffe_fwd.o caffe_pb caffe
slow_cpu_fwd.o
has_conv_fwd.o
nvrtc_util.o nvrtc
lmdb_caffe_disp.o caffe_pb lmdb SDL2
lmdb_caffe_io.o caffe_pb lmdb

# our modified version of the upgrade net func. we (questionably) use it even when compiling with full caffe support.
upgrade_proto.o caffe_pb

# we don't need/want our copy of the caffe protobuf wrapper code if we're compiling caffe, so we mark it -caffe.  FIXME:
# we should really also the caffe version of the protobuf header when we're compiling with full caffe support, but that
# seems tricky to do. we settle for checking if our version of caffe.proto is the same as the caffe version.
caffe.pb.o caffe_pb -caffe 

# caffe-related functionality that only needs the caffe protobuf headers (and generated code).
caffepb.o caffe_pb

lmdbif.o lmdb
test_dense.o caffe_pb
conv_common.o
asio_util.o
disp_app.o SDL2
cap_app.o SDL2 caffe_pb
caffeif.o caffe_pb 
cap_util.o
disp_util.o SDL2
conv_pyra.o SDL2 caffe_pb
conv_util.o
blf_pack.o
vr5_mex_feats.o
test_all.o
bb_tests.o
xml_util.o
timers.o
test_nesi.o
has_main.o
nesi.o
lexp.o 
img_io.o 
img_io-turbojpeg.o turbojpeg
img_io-no-turbojpeg-stub.o -turbojpeg
model.o octave
results_io.o  
pyif.o python
pyif-no-python-stub.o -python
octif.o octave
octif-no-octave-stub.o -octave
str_util.o 
geom_prim.o
boda_base.o 
pugixml.o
lodepng.o 
boda_help.o
boda.o
